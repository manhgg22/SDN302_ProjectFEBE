const express = require("express");
const router = express.Router();
const Question = require("../model/Question");
const User = require("../model/userBE");

const Exam = require("../model/Exam");
const Result = require("../model/Result");
const { verifyToken, checkRole } = require("../middleware/auth");


// ============================================================
// üß† C√ÇU H·ªéI
// ============================================================

/**
 * @route GET /admin/questions
 * @desc L·∫•y danh s√°ch to√†n b·ªô c√¢u h·ªèi
 */
router.get("/questions", async (req, res) => {
  try {
    const questions = await Question.find();
    res.json(questions);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y c√¢u h·ªèi" });
  }
});

/**
 * @route POST /admin/questions
 * @desc T·∫°o c√¢u h·ªèi m·ªõi
 */
router.patch("/user/:id", verifyToken, checkRole("admin"), async (req, res) => {
  try {
    const { status } = req.body;

    if (!["active", "inactive"].includes(status)) {
      return res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
    }

    const user = await User.findByIdAndUpdate(
      req.params.id,
      { status },
      { new: true }
    ).select("-password");

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.status(200).json({ message: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i", user });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});
router.post("/questions", async (req, res) => {
  try {
    const { content, options, correctAnswer, explanation, subject, level } = req.body;

    if (!content || !Array.isArray(options) || options.length < 2) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu ho·∫∑c sai ƒë·ªãnh d·∫°ng" });
    }

    const newQuestion = new Question({
      content,
      options,
      correctAnswer,
      explanation,
      subject,
      level,
      createdAt: new Date()
    });

    await newQuestion.save();
    res.status(201).json({ message: "‚úÖ T·∫°o c√¢u h·ªèi th√†nh c√¥ng", question: newQuestion });
  } catch (err) {
    res.status(500).json({ message: "L·ªói t·∫°o c√¢u h·ªèi", error: err.message });
  }
});
/**
 * @route PUT /admin/questions/:id
 * @desc C·∫≠p nh·∫≠t m·ªôt c√¢u h·ªèi
 */
router.put("/questions/:id", async (req, res) => {
  try {
    const { content, options, correctAnswer, explanation, subject, level } = req.body;

    const updated = await Question.findByIdAndUpdate(
      req.params.id,
      { content, options, correctAnswer, explanation, subject, level },
      { new: true }
    );

    if (!updated) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi" });

    res.status(200).json({ message: "‚úÖ C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng", question: updated });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t c√¢u h·ªèi", error: err.message });
  }
});
/**
 * @route DELETE /admin/questions/:id
 * @desc X√≥a m·ªôt c√¢u h·ªèi
 */
router.delete("/questions/:id", async (req, res) => {
  try {
    const deleted = await Question.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi" });

    res.status(200).json({ message: "‚úÖ ƒê√£ x√≥a c√¢u h·ªèi", id: req.params.id });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi x√≥a c√¢u h·ªèi", error: err.message });
  }
});

/**
 * @route GET /admin/questions/random?count=5
 * @desc Tr·∫£ v·ªÅ ng·∫´u nhi√™n X c√¢u h·ªèi
 */
router.get("/questions/random", verifyToken, checkRole("admin"), async (req, res) => {
  try {
    const count = parseInt(req.query.count) || 5;

    const questions = await Question.aggregate([
      { $sample: { size: count } } // Random count c√¢u h·ªèi
    ]);

    res.status(200).json(questions);
  } catch (err) {
    console.error("‚ùå L·ªói random c√¢u h·ªèi:", err.message);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});
/**
 * @route POST /admin/tests
 */
router.post("/tests", verifyToken, checkRole("admin"), async (req, res) => {
  try {
    const { title, description, code, duration, questionIds } = req.body;

    if (!title || !code || !Array.isArray(questionIds) || questionIds.length === 0) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu ho·∫∑c sai ƒë·ªãnh d·∫°ng" });
    }

    const examExists = await Exam.findOne({ code });
    if (examExists) {
      return res.status(400).json({ message: "M√£ ƒë·ªÅ thi ƒë√£ t·ªìn t·∫°i" });
    }

    const newExam = new Exam({
      title,
      description,
      code,
      duration,
      questionIds
    });

    await newExam.save();

    res.status(201).json({ message: "‚úÖ T·∫°o ƒë·ªÅ thi th√†nh c√¥ng", exam: newExam });
  } catch (err) {
    res.status(500).json({ message: "L·ªói t·∫°o ƒë·ªÅ thi", error: err.message });
  }
});
/**
 * @route GET /admin/tests
 * @desc L·∫•y danh s√°ch t·∫•t c·∫£ ƒë·ªÅ thi
 */
router.get("/tests", async (req, res) => {
  try {
    const exams = await Exam.find().sort({ createdAt: -1 });
    res.status(200).json(exams);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch ƒë·ªÅ thi" });
  }
});




// ============================================================
// üë§ T√ÄI KHO·∫¢N
// ============================================================

/**
 * @route GET /admin/accounts
 * @desc L·∫•y danh s√°ch t√†i kho·∫£n (Ch·ªâ admin)
 */
// routes/admin.js




/**
 * @route GET /admin/user
 * @desc L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (c·∫£ user v√† admin)
 */
router.get("/user", verifyToken, checkRole("admin"), async (req, res) => {
  try {
    const users = await User.find({ role: "user" }).select("-password");
    res.status(200).json(users);
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch user:", err); // üëà LOG CHI TI·∫æT L·ªñI
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng", error: err.message });
  }
});


module.exports = router;



/**
 * @route GET /admin/user/:id
 * @desc L·∫•y th√¥ng tin m·ªôt ng∆∞·ªùi d√πng theo ID
 */
router.get("/user/:id", async (req, res) => {
  try {
    const user = await User.findById(req.params.id).select("-password");
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    res.status(200).json(user);
  } catch (err) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
});


// ============================================================
// üìò ƒê·ªÄ THI
// ============================================================

/**
 * @route GET /admin/tests
 * @desc L·∫•y danh s√°ch t·∫•t c·∫£ ƒë·ªÅ thi
 */
router.get("/tests", async (req, res) => {
  try {
    const exams = await Exam.find().populate("questionIds");
    res.status(200).json(exams);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch ƒë·ªÅ thi" });
  }
});

/**
 * @route POST /admin/tests
 * @desc T·∫°o ƒë·ªÅ thi m·ªõi
 */
router.post("/tests", async (req, res) => {
  try {
    const { title, description, code, duration, questionIds } = req.body;

    if (!title || !code || !Array.isArray(questionIds) || questionIds.length === 0) {
      return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu ho·∫∑c sai ƒë·ªãnh d·∫°ng" });
    }

    const examExists = await Exam.findOne({ code });
    if (examExists) {
      return res.status(400).json({ message: "M√£ ƒë·ªÅ thi ƒë√£ t·ªìn t·∫°i" });
    }

    const newExam = new Exam({
      title,
      description,
      code,
      duration, // ph√∫t
      questionIds
    });

    await newExam.save();

    res.status(201).json({ message: "‚úÖ T·∫°o ƒë·ªÅ thi th√†nh c√¥ng", exam: newExam });
  } catch (err) {
    res.status(500).json({ message: "L·ªói t·∫°o ƒë·ªÅ thi", error: err.message });
  }
});

/**
 * @route GET /admin/exam/code/:code
 * @desc L·∫•y ID ƒë·ªÅ thi t·ª´ m√£ code
 */
router.get("/exam/code/:code", async (req, res) => {
  try {
    const exam = await Exam.findOne({ code: req.params.code });
    if (!exam) return res.status(404).json({ message: "Exam code kh√¥ng t·ªìn t·∫°i" });

    res.status(200).json({ examId: exam._id });
  } catch (err) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
});

/**
 * @route GET /admin/exam/:id
 * @desc L·∫•y chi ti·∫øt ƒë·ªÅ thi theo ID
 */
router.get("/exam/:id", async (req, res) => {
  try {
    const exam = await Exam.findById(req.params.id).populate("questionIds");

    if (!exam) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·ªÅ thi" });

    res.status(200).json({
      ...exam.toObject(),
      questions: exam.questionIds,
      duration: exam.duration
    });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi t·∫£i ƒë·ªÅ thi", error: err.message });
  }
});


// ============================================================
// üìä TH·ªêNG K√ä
// ============================================================

/**
 * @route GET /admin/results?code=REACT-MID
 * @desc L·∫•y danh s√°ch h·ªçc sinh ƒë√£ l√†m b√†i theo m√£ ƒë·ªÅ
 */
router.get("/results", async (req, res) => {
  const { code } = req.query;

  try {
    const exam = await Exam.findOne({ code });
    if (!exam) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√£ ƒë·ªÅ thi" });

    // üìå T·ª± ƒë·ªông join b·∫£ng User
    const results = await Result.find({ examId: exam._id })
      .populate("userId", "username email") // username + email t·ª´ b·∫£ng User
      .sort({ score: -1 });

    // ‚úÖ Map d·ªØ li·ªáu g·ªçn g√†ng
    const data = results.map((r) => ({
      userId: r.userId?._id || "Kh√¥ng c√≥",
      username: r.userId?.username || "Kh√¥ng c√≥",
      email: r.userId?.email || "Kh√¥ng c√≥",
      score: r.score,
      submittedAt: r.submittedAt
    }));

    res.status(200).json({
      examTitle: exam.title,
      examCode: code,
      total: data.length,
      results: data
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi truy xu·∫•t th·ªëng k√™:", err.message);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: err.message });
  }
});





module.exports = router;
